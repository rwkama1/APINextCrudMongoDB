{"ast":null,"code":"import { Component } from \"react\";\nimport cors from \"./cors\";\nimport { DataProduct } from \"crudmongodb/dist/dataproduct\";\nimport { DTProduct } from \"crudmongodb/dist/product\";\nexport default async function (req, res) {\n  if (req.method === \"GET\") {\n    await cors(req, res);\n    const list = await DataProduct.getInstance().getProducts();\n    return res.send(list);\n  }\n\n  if (req.method === \"POST\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      var dtproduct = new DTProduct(0, data.name, data.price);\n      const addproduct = await DataProduct.getInstance().addProduct(dtproduct);\n      return res.status(200).send(\"Success\");\n    } catch (error) {\n      return res.status(500).send(\"Could not add Product: \" + error.message);\n    }\n  }\n\n  if (req.method === \"PUT\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      var dtproduct = new DTProduct(0, data.name, data.price);\n      const updprod = await DataProduct.getInstance().updateProduct(dtproduct);\n      return res.status(200).send(\"Success\");\n    } catch (error) {\n      return res.status(500).send(\"Could not UPDATE Product: \" + error.message);\n    }\n  }\n\n  if (req.method === \"DELETE\") {\n    await cors(req, res);\n    const data = req.body;\n\n    try {\n      var dtproduct = new DTProduct(0, data.name, 0);\n      const deletep = await DataProduct.getInstance().deleteProduct(dtproduct);\n      return res.status(200).send(\"Success\");\n    } catch (error) {\n      return res.status(500).send(\"Could not DELETE Product: \" + error.message);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Waldemar/Desktop/Guias y Cosas Analista de Sistemas/APINextCrudMongo/pages/api/product.js"],"names":["Component","cors","DataProduct","DTProduct","req","res","method","list","getInstance","getProducts","send","data","body","dtproduct","name","price","addproduct","addProduct","status","error","message","updprod","updateProduct","deletep","deleteProduct"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,eAAe,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACrC,MAAGD,GAAG,CAACE,MAAJ,KAAa,KAAhB,EACA;AACC,UAAML,IAAI,CAACG,GAAD,EAAMC,GAAN,CAAV;AACC,UAAME,IAAI,GAAC,MAAML,WAAW,CAACM,WAAZ,GAA0BC,WAA1B,EAAjB;AACA,WAAOJ,GAAG,CAACK,IAAJ,CAASH,IAAT,CAAP;AACD;;AACD,MAAGH,GAAG,CAACE,MAAJ,KAAa,MAAhB,EACA;AACE,UAAML,IAAI,CAACG,GAAD,EAAMC,GAAN,CAAV;;AACA,QACA;AACA,YAAMM,IAAI,GAAGP,GAAG,CAACQ,IAAjB;AACA,UAAIC,SAAS,GAAC,IAAIV,SAAJ,CAAc,CAAd,EAAiBQ,IAAI,CAACG,IAAtB,EAA2BH,IAAI,CAACI,KAAhC,CAAd;AAEA,YAAMC,UAAU,GAAC,MAAMd,WAAW,CAACM,WAAZ,GAA0BS,UAA1B,CAAqCJ,SAArC,CAAvB;AACA,aAAOR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,SAArB,CAAP;AACC,KAPD,CAQA,OAAOS,KAAP,EAAc;AACZ,aAAOd,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,4BAA0BS,KAAK,CAACC,OAArD,CAAP;AAED;AACF;;AACA,MAAGhB,GAAG,CAACE,MAAJ,KAAa,KAAhB,EACG;AACA,UAAML,IAAI,CAACG,GAAD,EAAMC,GAAN,CAAV;;AACA,QACA;AACA,YAAMM,IAAI,GAAGP,GAAG,CAACQ,IAAjB;AACA,UAAIC,SAAS,GAAC,IAAIV,SAAJ,CAAc,CAAd,EAAiBQ,IAAI,CAACG,IAAtB,EAA2BH,IAAI,CAACI,KAAhC,CAAd;AACA,YAAMM,OAAO,GAAC,MAAMnB,WAAW,CAACM,WAAZ,GAA0Bc,aAA1B,CAAwCT,SAAxC,CAApB;AACA,aAAOR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,SAArB,CAAP;AACH,KANG,CAOJ,OAAOS,KAAP,EAAc;AACZ,aAAOd,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,+BAA6BS,KAAK,CAACC,OAAxD,CAAP;AAED;AACJ;;AACD,MAAGhB,GAAG,CAACE,MAAJ,KAAa,QAAhB,EACA;AACI,UAAML,IAAI,CAACG,GAAD,EAAMC,GAAN,CAAV;AACA,UAAMM,IAAI,GAAGP,GAAG,CAACQ,IAAjB;;AACA,QACA;AAEA,UAAIC,SAAS,GAAC,IAAIV,SAAJ,CAAc,CAAd,EAAiBQ,IAAI,CAACG,IAAtB,EAA2B,CAA3B,CAAd;AACA,YAAMS,OAAO,GAAC,MAAMrB,WAAW,CAACM,WAAZ,GAA0BgB,aAA1B,CAAwCX,SAAxC,CAApB;AACA,aAAOR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,SAArB,CAAP;AACH,KANG,CAOJ,OAAOS,KAAP,EAAc;AACZ,aAAOd,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,+BAA6BS,KAAK,CAACC,OAAxD,CAAP;AAED;AACA;AAEA","sourcesContent":["import { Component } from \"react\";\r\nimport cors from \"./cors\";\r\nimport {DataProduct} from \"crudmongodb/dist/dataproduct\";\r\nimport { DTProduct } from \"crudmongodb/dist/product\";\r\nexport default async function (req, res) {\r\n    if(req.method===\"GET\")\r\n    {\r\n     await cors(req, res)\r\n      const list=await DataProduct.getInstance().getProducts();\r\n      return res.send(list);\r\n    }\r\n    if(req.method===\"POST\")\r\n    {\r\n      await cors(req, res)\r\n      try\r\n      {\r\n      const data = req.body;\r\n      var dtproduct=new DTProduct(0, data.name,data.price);\r\n      \r\n      const addproduct=await DataProduct.getInstance().addProduct(dtproduct);\r\n      return res.status(200).send(\"Success\");   \r\n      }\r\n      catch (error) {\r\n        return res.status(500).send(\"Could not add Product: \"+error.message);    \r\n        \r\n      }\r\n    }\r\n     if(req.method===\"PUT\")\r\n        {\r\n        await cors(req, res)\r\n        try\r\n        {\r\n        const data = req.body;\r\n        var dtproduct=new DTProduct(0, data.name,data.price);\r\n        const updprod=await DataProduct.getInstance().updateProduct(dtproduct);\r\n        return res.status(200).send(\"Success\");   \r\n    }\r\n    catch (error) {\r\n      return res.status(500).send(\"Could not UPDATE Product: \"+error.message);    \r\n      \r\n    }   \r\n}\r\nif(req.method===\"DELETE\")\r\n{\r\n    await cors(req, res);\r\n    const data = req.body;\r\n    try\r\n    {\r\n\r\n    var dtproduct=new DTProduct(0, data.name,0);\r\n    const deletep=await DataProduct.getInstance().deleteProduct(dtproduct);\r\n    return res.status(200).send(\"Success\");   \r\n}\r\ncatch (error) {\r\n  return res.status(500).send(\"Could not DELETE Product: \"+error.message);    \r\n  \r\n}   \r\n}\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}