{"ast":null,"code":"import { Component } from \"react\";\nimport cors from \"./cors\";\nimport { DataProduct } from \"crudmongodb/dist/dataproduct\";\nimport { DTProduct } from \"crudmongodb/dist/product\";\nexport default async function (req, res) {\n  if (req.method === \"GET\") {\n    await cors(req, res);\n    const list = await DataProduct.getInstance().getProducts();\n    return res.send(list);\n  }\n\n  if (req.method === \"POST\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      var dtproduct = new DTProduct(data.barcode, data.name, data.price);\n      const addproduct = await DataProduct.getInstance().addProduct(dtproduct);\n      return res.status(200).send(\"Success\");\n    } catch (error) {\n      return res.status(500).send(\"Could not add Product \" + error.message);\n    }\n  }\n\n  if (req.method === \"PUT\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      var dtproduct = new Product(data.barcode, data.name, data.price);\n      const updprod = await DataProduct.getInstance().updateProduct(dtproduct);\n      return res.status(200).json({\n        status: \"Success\"\n      });\n    } catch (error) {\n      return res.status(500).json({\n        status: \"Error\",\n        data: {\n          msg: \"Could not update product\",\n          error\n        }\n      });\n    }\n  }\n} // export default async function (req, res) {\n//     if(req.method===\"PUT\")\n//     {\n//       await cors(req, res)\n//       try\n//       {\n//       const data = req.body;\n//       var dtproduct=new Product(data.barcode, data.name,data.price);\n//       const updprod=await DProduct.getInstance().updateProduct(dtproduct);\n//       return res.status(200).json({ status: \"Success\" });\n//       }\n//       catch (error) {\n//         return res.status(500).json({\n//           status: \"Error\",\n//           data: { msg: \"Could not update product\", error }\n//         });\n//       }\n//     }\n//     if(req.method===\"DELETE\")\n//     {\n//       await cors(req, res);\n//       const { barcode } = req.query;\n//       try\n//       {\n//       var dtproduct=new Product(barcode, \"\",0);\n//       const delprod=await DProduct.getInstance().deleteProduct(dtproduct);\n//       return res.status(200).json({ status: \"Success\" });\n//       }\n//       catch (error) {\n//         return res.status(500).json({\n//           status: \"Error\",\n//           data: { msg: \"Could not delete product\", error }\n//         });\n//       }\n//     }\n//     }","map":{"version":3,"sources":["C:/Users/Waldemar/Desktop/Guias y Cosas Analista de Sistemas/APINextCrudMongo/pages/api/product.js"],"names":["Component","cors","DataProduct","DTProduct","req","res","method","list","getInstance","getProducts","send","data","body","dtproduct","barcode","name","price","addproduct","addProduct","status","error","message","Product","updprod","updateProduct","json","msg"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,eAAe,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACrC,MAAGD,GAAG,CAACE,MAAJ,KAAa,KAAhB,EACA;AACC,UAAML,IAAI,CAACG,GAAD,EAAMC,GAAN,CAAV;AACC,UAAME,IAAI,GAAC,MAAML,WAAW,CAACM,WAAZ,GAA0BC,WAA1B,EAAjB;AACA,WAAOJ,GAAG,CAACK,IAAJ,CAASH,IAAT,CAAP;AACD;;AACD,MAAGH,GAAG,CAACE,MAAJ,KAAa,MAAhB,EACA;AACE,UAAML,IAAI,CAACG,GAAD,EAAMC,GAAN,CAAV;;AACA,QACA;AACA,YAAMM,IAAI,GAAGP,GAAG,CAACQ,IAAjB;AACA,UAAIC,SAAS,GAAC,IAAIV,SAAJ,CAAcQ,IAAI,CAACG,OAAnB,EAA4BH,IAAI,CAACI,IAAjC,EAAsCJ,IAAI,CAACK,KAA3C,CAAd;AAEA,YAAMC,UAAU,GAAC,MAAMf,WAAW,CAACM,WAAZ,GAA0BU,UAA1B,CAAqCL,SAArC,CAAvB;AACA,aAAOR,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,SAArB,CAAP;AACC,KAPD,CAQA,OAAOU,KAAP,EAAc;AACZ,aAAOf,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,2BAAyBU,KAAK,CAACC,OAApD,CAAP;AAED;AACF;;AACA,MAAGjB,GAAG,CAACE,MAAJ,KAAa,KAAhB,EACG;AACA,UAAML,IAAI,CAACG,GAAD,EAAMC,GAAN,CAAV;;AACA,QACA;AACA,YAAMM,IAAI,GAAGP,GAAG,CAACQ,IAAjB;AACA,UAAIC,SAAS,GAAC,IAAIS,OAAJ,CAAYX,IAAI,CAACG,OAAjB,EAA0BH,IAAI,CAACI,IAA/B,EAAoCJ,IAAI,CAACK,KAAzC,CAAd;AACA,YAAMO,OAAO,GAAC,MAAMrB,WAAW,CAACM,WAAZ,GAA0BgB,aAA1B,CAAwCX,SAAxC,CAApB;AACA,aAAOR,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AAAEN,QAAAA,MAAM,EAAE;AAAV,OAArB,CAAP;AACC,KAND,CAOA,OAAOC,KAAP,EAAc;AACV,aAAOf,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AAC5BN,QAAAA,MAAM,EAAE,OADoB;AAE5BR,QAAAA,IAAI,EAAE;AAAEe,UAAAA,GAAG,EAAE,0BAAP;AAAmCN,UAAAA;AAAnC;AAFsB,OAArB,CAAP;AAIH;AACH;AACL,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Component } from \"react\";\r\nimport cors from \"./cors\";\r\nimport {DataProduct} from \"crudmongodb/dist/dataproduct\";\r\nimport { DTProduct } from \"crudmongodb/dist/product\";\r\nexport default async function (req, res) {\r\n    if(req.method===\"GET\")\r\n    {\r\n     await cors(req, res)\r\n      const list=await DataProduct.getInstance().getProducts();\r\n      return res.send(list);\r\n    }\r\n    if(req.method===\"POST\")\r\n    {\r\n      await cors(req, res)\r\n      try\r\n      {\r\n      const data = req.body;\r\n      var dtproduct=new DTProduct(data.barcode, data.name,data.price);\r\n      \r\n      const addproduct=await DataProduct.getInstance().addProduct(dtproduct);\r\n      return res.status(200).send(\"Success\");   \r\n      }\r\n      catch (error) {\r\n        return res.status(500).send(\"Could not add Product \"+error.message);    \r\n        \r\n      }\r\n    }\r\n     if(req.method===\"PUT\")\r\n        {\r\n        await cors(req, res)\r\n        try\r\n        {\r\n        const data = req.body;\r\n        var dtproduct=new Product(data.barcode, data.name,data.price);\r\n        const updprod=await DataProduct.getInstance().updateProduct(dtproduct);\r\n        return res.status(200).json({ status: \"Success\" });\r\n        }\r\n        catch (error) {\r\n            return res.status(500).json({\r\n            status: \"Error\",\r\n            data: { msg: \"Could not update product\", error }\r\n            });\r\n        }\r\n     }\r\n}\r\n\r\n// export default async function (req, res) {\r\n\r\n//     if(req.method===\"PUT\")\r\n//     {\r\n//       await cors(req, res)\r\n//       try\r\n//       {\r\n//       const data = req.body;\r\n//       var dtproduct=new Product(data.barcode, data.name,data.price);\r\n//       const updprod=await DProduct.getInstance().updateProduct(dtproduct);\r\n//       return res.status(200).json({ status: \"Success\" });\r\n//       }\r\n//       catch (error) {\r\n//         return res.status(500).json({\r\n//           status: \"Error\",\r\n//           data: { msg: \"Could not update product\", error }\r\n//         });\r\n//       }\r\n//     }\r\n//     if(req.method===\"DELETE\")\r\n//     {\r\n//       await cors(req, res);\r\n//       const { barcode } = req.query;\r\n//       try\r\n//       {\r\n//       var dtproduct=new Product(barcode, \"\",0);\r\n//       const delprod=await DProduct.getInstance().deleteProduct(dtproduct);\r\n//       return res.status(200).json({ status: \"Success\" });\r\n//       }\r\n//       catch (error) {\r\n//         return res.status(500).json({\r\n//           status: \"Error\",\r\n//           data: { msg: \"Could not delete product\", error }\r\n//         });\r\n//       }\r\n//     }\r\n//     }"]},"metadata":{},"sourceType":"module"}